name: CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    # permissions:
    #   contents: read

    steps:
    # 1) 워크플로우 실행 전 기본적으로 체크아웃 필요
    - name: checkout
      uses: actions/checkout@v4
      
    # 2) JDK 17버전 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3) 환경변수 파일 생성
    - name: make application.properties 파일 생성 
      run: |
        ## create application.properties 
        cd ./src/main/resources
        # application.properties 파일 생성 
        touch ./application.properties
        # GitHub-Actions 에서 설정한 값을 application.properties 파일에 쓰기 
        echo "${{ secrets.HACKOK_SECRET }}" >> ./application.properties
        # application.properties 파일 확인 
        cat ./application.properties
      shell: bash
    
    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    
    # 이 워크플로우는 gradle build
    - name: Grant execute permission for gradlew 
      run: chmod +x gradlew
  
    - name: Build with Gradle # 실제 application build(-x 옵션을 통해 테스트는 실행하지 않음)
      run: ./gradlew build -x test

    # 여기까지는 CI.yaml와 동일

    - name: docker build 가능하도록 환경 설정
      uses: docker/setup-buildx-action@v4
      
    - name: docker hub에로그인
      uses: docker/login-action@v4
      with:
        username: ${{ secrets.DOCKERHUB_LOGIN_USERNAME }}
        password: ${{ secrets.DOCKERHUB_LOGIN_ACCESSTOKEN }}

    - name: docker image 빌드 및 푸시
      run: |
        docker build --platform linux/amd64 -t alenjb/hackok .
        docker push alenjb/hackok
      working-directory: ${{ env.working-directory }}

  deploy-cd:      
    needs: deploy-ci
    runs-on: ubuntu-22.04

    steps:    
    - name: 도커 컨테이너 실행
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.RELEASE_SERVER_IP }}
        username: ${{ secrets.RELEASE_SERVER_USER }}
        key: ${{ secrets.RELEASE_SERVER_KEY }}
        script: |
				  docker rm -f hackok
          docker image pull alenjb/hackok
					docker run -d --name hackok-8080 -p 8080:8080 alenjb/hackok
  
